"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/admin/page",{

/***/ "(app-pages-browser)/./lib/api.ts":
/*!********************!*\
  !*** ./lib/api.ts ***!
  \********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_URL: function() { return /* binding */ API_URL; },\n/* harmony export */   api: function() { return /* binding */ api; },\n/* harmony export */   apiUpload: function() { return /* binding */ apiUpload; },\n/* harmony export */   downloadFile: function() { return /* binding */ downloadFile; },\n/* harmony export */   getDownloadUrl: function() { return /* binding */ getDownloadUrl; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nconst API_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8080/api\";\nasync function getDownloadUrl(requestId, transcriptUrl) {\n    // Always get a fresh presigned URL from the backend\n    // This ensures we always get the correct URL regardless of stored URL changes\n    const res = await fetch(\"\".concat(API_URL, \"/requests/\").concat(requestId, \"/download\"), {\n        credentials: \"include\" // if you use cookies/session\n    });\n    if (!res.ok) throw new Error(\"Failed to fetch download URL\");\n    const data = await res.json();\n    return data.url;\n}\nasync function downloadFile(requestId, transcriptUrl) {\n    try {\n        // Get the presigned URL\n        const url = await getDownloadUrl(requestId, transcriptUrl);\n        // Fetch the file as a blob to avoid CORS issues\n        const response = await fetch(url);\n        if (!response.ok) throw new Error(\"Failed to download file\");\n        const blob = await response.blob();\n        // Create a download link\n        const downloadUrl = window.URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.href = downloadUrl;\n        link.download = \"transcript-\".concat(requestId, \".pdf\");\n        // Trigger download\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        // Clean up the blob URL\n        window.URL.revokeObjectURL(downloadUrl);\n    } catch (error) {\n        console.error(\"Download failed:\", error);\n        throw error;\n    }\n}\nasync function api(path, init) {\n    const res = await fetch(\"\".concat(API_URL).concat(path), {\n        credentials: \"include\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            ...(init === null || init === void 0 ? void 0 : init.headers) || {}\n        },\n        ...init\n    });\n    if (!res.ok) throw new Error(await res.text());\n    return res.json();\n}\nasync function apiUpload(path, form) {\n    const res = await fetch(\"\".concat(API_URL).concat(path), {\n        method: \"POST\",\n        credentials: \"include\",\n        body: form\n    });\n    if (!res.ok) throw new Error(await res.text());\n    return res.json();\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi9hcGkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQU8sTUFBTUEsVUFBVUMsT0FBT0EsQ0FBQ0MsR0FBRyxDQUFDQyxtQkFBbUIsSUFBSSw0QkFBNEI7QUFFL0UsZUFBZUMsZUFBZUMsU0FBaUIsRUFBRUMsYUFBNkI7SUFDbkYsb0RBQW9EO0lBQ3BELDhFQUE4RTtJQUM5RSxNQUFNQyxNQUFNLE1BQU1DLE1BQU0sR0FBdUJILE9BQXBCTCxTQUFRLGNBQXNCLE9BQVZLLFdBQVUsY0FBWTtRQUNuRUksYUFBYSxVQUFVLDZCQUE2QjtJQUN0RDtJQUNBLElBQUksQ0FBQ0YsSUFBSUcsRUFBRSxFQUFFLE1BQU0sSUFBSUMsTUFBTTtJQUM3QixNQUFNQyxPQUFPLE1BQU1MLElBQUlNLElBQUk7SUFDM0IsT0FBT0QsS0FBS0UsR0FBRztBQUNqQjtBQUVPLGVBQWVDLGFBQWFWLFNBQWlCLEVBQUVDLGFBQTZCO0lBQ2pGLElBQUk7UUFDRix3QkFBd0I7UUFDeEIsTUFBTVEsTUFBTSxNQUFNVixlQUFlQyxXQUFXQztRQUU1QyxnREFBZ0Q7UUFDaEQsTUFBTVUsV0FBVyxNQUFNUixNQUFNTTtRQUM3QixJQUFJLENBQUNFLFNBQVNOLEVBQUUsRUFBRSxNQUFNLElBQUlDLE1BQU07UUFFbEMsTUFBTU0sT0FBTyxNQUFNRCxTQUFTQyxJQUFJO1FBRWhDLHlCQUF5QjtRQUN6QixNQUFNQyxjQUFjQyxPQUFPQyxHQUFHLENBQUNDLGVBQWUsQ0FBQ0o7UUFDL0MsTUFBTUssT0FBT0MsU0FBU0MsYUFBYSxDQUFDO1FBQ3BDRixLQUFLRyxJQUFJLEdBQUdQO1FBQ1pJLEtBQUtJLFFBQVEsR0FBRyxjQUF3QixPQUFWckIsV0FBVTtRQUV4QyxtQkFBbUI7UUFDbkJrQixTQUFTSSxJQUFJLENBQUNDLFdBQVcsQ0FBQ047UUFDMUJBLEtBQUtPLEtBQUs7UUFDVk4sU0FBU0ksSUFBSSxDQUFDRyxXQUFXLENBQUNSO1FBRTFCLHdCQUF3QjtRQUN4QkgsT0FBT0MsR0FBRyxDQUFDVyxlQUFlLENBQUNiO0lBQzdCLEVBQUUsT0FBT2MsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsb0JBQW9CQTtRQUNsQyxNQUFNQTtJQUNSO0FBQ0Y7QUFFTyxlQUFlRSxJQUFJQyxJQUFZLEVBQUVDLElBQWtCO0lBQ3hELE1BQU03QixNQUFNLE1BQU1DLE1BQU0sR0FBYTJCLE9BQVZuQyxTQUFlLE9BQUxtQyxPQUFRO1FBQzNDMUIsYUFBYTtRQUNiNEIsU0FBUztZQUFFLGdCQUFnQjtZQUFvQixHQUFJRCxDQUFBQSxpQkFBQUEsMkJBQUFBLEtBQU1DLE9BQU8sS0FBSSxDQUFDLENBQUM7UUFBRTtRQUN4RSxHQUFHRCxJQUFJO0lBQ1Q7SUFDQSxJQUFJLENBQUM3QixJQUFJRyxFQUFFLEVBQUUsTUFBTSxJQUFJQyxNQUFNLE1BQU1KLElBQUkrQixJQUFJO0lBQzNDLE9BQU8vQixJQUFJTSxJQUFJO0FBQ2pCO0FBRU8sZUFBZTBCLFVBQVVKLElBQVksRUFBRUssSUFBYztJQUMxRCxNQUFNakMsTUFBTSxNQUFNQyxNQUFNLEdBQWEyQixPQUFWbkMsU0FBZSxPQUFMbUMsT0FBUTtRQUMzQ00sUUFBUTtRQUNSaEMsYUFBYTtRQUNia0IsTUFBTWE7SUFDUjtJQUNBLElBQUksQ0FBQ2pDLElBQUlHLEVBQUUsRUFBRSxNQUFNLElBQUlDLE1BQU0sTUFBTUosSUFBSStCLElBQUk7SUFDM0MsT0FBTy9CLElBQUlNLElBQUk7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbGliL2FwaS50cz82OGExIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBBUElfVVJMID0gcHJvY2Vzcy5lbnYuTkVYVF9QVUJMSUNfQVBJX1VSTCB8fCAnaHR0cDovL2xvY2FsaG9zdDo4MDgwL2FwaSc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXREb3dubG9hZFVybChyZXF1ZXN0SWQ6IHN0cmluZywgdHJhbnNjcmlwdFVybD86IHN0cmluZyB8IG51bGwpIHtcbiAgLy8gQWx3YXlzIGdldCBhIGZyZXNoIHByZXNpZ25lZCBVUkwgZnJvbSB0aGUgYmFja2VuZFxuICAvLyBUaGlzIGVuc3VyZXMgd2UgYWx3YXlzIGdldCB0aGUgY29ycmVjdCBVUkwgcmVnYXJkbGVzcyBvZiBzdG9yZWQgVVJMIGNoYW5nZXNcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7QVBJX1VSTH0vcmVxdWVzdHMvJHtyZXF1ZXN0SWR9L2Rvd25sb2FkYCwge1xuICAgIGNyZWRlbnRpYWxzOiBcImluY2x1ZGVcIiAvLyBpZiB5b3UgdXNlIGNvb2tpZXMvc2Vzc2lvblxuICB9KTtcbiAgaWYgKCFyZXMub2spIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBmZXRjaCBkb3dubG9hZCBVUkxcIik7XG4gIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuICByZXR1cm4gZGF0YS51cmw7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkb3dubG9hZEZpbGUocmVxdWVzdElkOiBzdHJpbmcsIHRyYW5zY3JpcHRVcmw/OiBzdHJpbmcgfCBudWxsKSB7XG4gIHRyeSB7XG4gICAgLy8gR2V0IHRoZSBwcmVzaWduZWQgVVJMXG4gICAgY29uc3QgdXJsID0gYXdhaXQgZ2V0RG93bmxvYWRVcmwocmVxdWVzdElkLCB0cmFuc2NyaXB0VXJsKTtcbiAgICBcbiAgICAvLyBGZXRjaCB0aGUgZmlsZSBhcyBhIGJsb2IgdG8gYXZvaWQgQ09SUyBpc3N1ZXNcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7XG4gICAgaWYgKCFyZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZG93bmxvYWQgZmlsZScpO1xuICAgIFxuICAgIGNvbnN0IGJsb2IgPSBhd2FpdCByZXNwb25zZS5ibG9iKCk7XG4gICAgXG4gICAgLy8gQ3JlYXRlIGEgZG93bmxvYWQgbGlua1xuICAgIGNvbnN0IGRvd25sb2FkVXJsID0gd2luZG93LlVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICBsaW5rLmhyZWYgPSBkb3dubG9hZFVybDtcbiAgICBsaW5rLmRvd25sb2FkID0gYHRyYW5zY3JpcHQtJHtyZXF1ZXN0SWR9LnBkZmA7XG4gICAgXG4gICAgLy8gVHJpZ2dlciBkb3dubG9hZFxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluayk7XG4gICAgbGluay5jbGljaygpO1xuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQobGluayk7XG4gICAgXG4gICAgLy8gQ2xlYW4gdXAgdGhlIGJsb2IgVVJMXG4gICAgd2luZG93LlVSTC5yZXZva2VPYmplY3RVUkwoZG93bmxvYWRVcmwpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Rvd25sb2FkIGZhaWxlZDonLCBlcnJvcik7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGFwaShwYXRoOiBzdHJpbmcsIGluaXQ/OiBSZXF1ZXN0SW5pdCkge1xuICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgJHtBUElfVVJMfSR7cGF0aH1gLCB7XG4gICAgY3JlZGVudGlhbHM6ICdpbmNsdWRlJyxcbiAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsIC4uLihpbml0Py5oZWFkZXJzIHx8IHt9KSB9LFxuICAgIC4uLmluaXRcbiAgfSk7XG4gIGlmICghcmVzLm9rKSB0aHJvdyBuZXcgRXJyb3IoYXdhaXQgcmVzLnRleHQoKSk7XG4gIHJldHVybiByZXMuanNvbigpO1xufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXBpVXBsb2FkKHBhdGg6IHN0cmluZywgZm9ybTogRm9ybURhdGEpIHtcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYCR7QVBJX1VSTH0ke3BhdGh9YCwge1xuICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsXG4gICAgYm9keTogZm9ybVxuICB9KTtcbiAgaWYgKCFyZXMub2spIHRocm93IG5ldyBFcnJvcihhd2FpdCByZXMudGV4dCgpKTtcbiAgcmV0dXJuIHJlcy5qc29uKCk7XG59XG4iXSwibmFtZXMiOlsiQVBJX1VSTCIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19BUElfVVJMIiwiZ2V0RG93bmxvYWRVcmwiLCJyZXF1ZXN0SWQiLCJ0cmFuc2NyaXB0VXJsIiwicmVzIiwiZmV0Y2giLCJjcmVkZW50aWFscyIsIm9rIiwiRXJyb3IiLCJkYXRhIiwianNvbiIsInVybCIsImRvd25sb2FkRmlsZSIsInJlc3BvbnNlIiwiYmxvYiIsImRvd25sb2FkVXJsIiwid2luZG93IiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwibGluayIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJkb3dubG9hZCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImNsaWNrIiwicmVtb3ZlQ2hpbGQiLCJyZXZva2VPYmplY3RVUkwiLCJlcnJvciIsImNvbnNvbGUiLCJhcGkiLCJwYXRoIiwiaW5pdCIsImhlYWRlcnMiLCJ0ZXh0IiwiYXBpVXBsb2FkIiwiZm9ybSIsIm1ldGhvZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api.ts\n"));

/***/ })

});